<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        BwPgcA4H8BAYD/gH4B/8AAA//wAA///AA/8=
</value>
  </data>
</root>